generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @unique @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
  bookmarks     Bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Collection model that will contain bookmarks inside, and will be used to group bookmarks
// each user will have a collection with the name "all" that will contain all bookmarks
// each user will have a collections field that will contain all collections
// and collections will contain bookmarks inside
model Collection {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookmarks Bookmark[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  url         String
  title       String
  description String?
  icon        String?
  iconBase64  String?
  image       String?
  imageBase64 String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
